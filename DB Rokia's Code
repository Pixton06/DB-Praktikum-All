
import os
from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)

# Database Configuration
basedir = os.path.abspath(os.path.dirname(__file__))
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'order.db')

# Database Configuration
#basedir = os.path.abspath(os.path.dirname(__file__))
#database_path = os.path.join(basedir, 'database')  # Construct path to database folder
#app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(database_path, 'order.db')

app.static_folder = 'static'

app.config['SECRET_KEY'] = 'your_strong_secret_key'  # Replace with a secure key
db = SQLAlchemy(app)

# Customer Model
class Customer(db.Model):
    __tablename__ = 'customers'
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.Text, nullable=False)
    last_name = db.Column(db.Text, nullable=False)
    email = db.Column(db.Text, nullable=False, unique=True)
    phone_number = db.Column(db.Text, nullable=False)
    address = db.Column(db.Text)
    city = db.Column(db.Text)
    state = db.Column(db.Text)
    zip_code = db.Column(db.Text)
    password = db.Column(db.Text, nullable=False)

# Create the database table within the application context
with app.app_context():
    db.create_all()

# Routes
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        try:
            customer = Customer.query.filter_by(email=email).first()
            if customer and customer.password == password:
                session['email'] = customer.email
                flash('Login successful!', 'success')
                return redirect(url_for('home'))
            else:
                flash('Invalid email or password', 'danger')
        except Exception as e:
            flash('An error occurred while processing your login request.', 'danger')
            print(f"Error: {e}")  # Log the error for debugging

    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('email', None)
    flash('You have been logged out', 'success')
    return redirect(url_for('home'))

if __name__ == '__main__':
    app.run(debug=True)
